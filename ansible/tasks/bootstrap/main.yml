---
- name: Run 'robertdebock.update_package_cache'-role
  ansible.builtin.include_role:
    name: robertdebock.update_package_cache

- name: Run 'robertdebock.core_dependencies'-role
  ansible.builtin.include_role:
    name: robertdebock.core_dependencies

- name: Run 'robertdebock.bootstrap'-role
  ansible.builtin.include_role:
    name: robertdebock.bootstrap

- name: Run 'robertdebock.epel'-role
  ansible.builtin.include_role:
    name: robertdebock.epel

- name: Run 'robertdebock.update'-role
  ansible.builtin.include_role:
    name: robertdebock.update
  vars:
    update_reboot: false # Using a custom reboot with `post_reboot_delay` seems to help avoid hetzner reboot issues (stuck waiting for reboot).

- name: Run 'geerlingguy.firewall'-role # On OCI we need to use IPTables. See https://stackoverflow.com/questions/54794217/opening-port-80-on-oracle-cloud-infrastructure-compute-node
  ansible.builtin.include_role:
    name: geerlingguy.firewall
  vars:
    firewall_flush_rules_and_chains: false
    firewall_allowed_tcp_ports:
      - 22
  when: hostvars[inventory_hostname]['cloudprovider'] == "oci"

- name: Run 'robertdebock.firewall'-role # Since we are not running on OCI we can use good 'ol UFW.
  ansible.builtin.include_role:
    name: robertdebock.firewall
  vars:
    firewall_services:
      - name: ssh
      - name: http
      - name: https
      - name: 8080
        protocol: tcp
  when: hostvars[inventory_hostname]['cloudprovider'] != "oci"

- name: Reboot to apply role changes
  ansible.builtin.reboot:
    post_reboot_delay: 10

- name: Flush handlers triggered turing bootstrap
  ansible.builtin.meta: flush_handlers
